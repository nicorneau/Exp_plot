toto <- mapply(rnorm, 100, 1:5, 2)
toto
apply(toto,2,mean)
toto <- mapply(rnorm, 100, 1:5, 2)
toto
apply(toto,2,mean)
toto <- mapply(rnorm, 100, 1:5, 2)
toto
apply(toto,2,mean)
toto <- mapply(rnorm, 100, 1:5, 2)
toto
apply(toto,2,mean)
toto <- mapply(rnorm, 100, 1:5, 2)
toto
apply(toto,2,mean)
###Assignement 2###
##example
#vector creation
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
###Assignement 2###
##example
#vector creation
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#mean calculation
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
#test
test <- makeVector(10)
cachemean(test)
cachemean(test)
test <- makeVector(1:2000)
cachemean(test)
cachemean(test)
x <- cbind( c(0.2, 0.9, 1), c(1.0, 5.1, 1), c(6, 0.2, 1), c(2.0, 9, 1))
solve(x)
x <- cbind( c(0.2, 0.9, 1), c(1.0, 5.1, 1), c(6, 0.2, 1))
solve(x)
makeCacheMatrix <- function(x = matrix){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
x <- cbind( c(0.2, 0.9, 1), c(1.0, 5.1, 1), c(6, 0.2, 1))
toto <- makeCacheMatrix(x)
toto
#matrix making
makeCacheMatrix <- function(x = matrix){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#matrix inversing
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x <- cbind( c(0.2, 0.9, 1), c(1.0, 5.1, 1), c(6, 0.2, 1))
solve(x)
toto <- makeCacheMatrix(x)
toto2 <- cacheSolve(toto)
toto2
cacheSolve(toto)
##assignement
#matrix making
makeCacheMatrix <- function(x = matrix){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#matrix inversing
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x
toto <- makeCacheMatrix(x)
toto
bleh <- cacheSolve(toto)
bleh
x <- cbind(c(1,2,3),c(2,3,4),c(4,5,6))
x
toto <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#this function create a list where the 1st element store the matrix itself, the 2nd element create an empty
#object for storing the inverse of the matrix, the 3rd element is a function for storing the inverse and the
#matrix and the 4th element is a function calculating the inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
#this function look in the object past in makeCacheMatrix and verified if the inverse of the matrix has already
#been calculated, if it is the case, the function simply return the inverse that is stored, otherwise, the function
#caculates the inverse of the matrix, stored it and return it
x <- cbind(c(1,2,3),c(2,3,4),c(4,5,6))
x
toto <- makeCacheMatrix(x)
cacheSolve(toto)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#this function create a list where the 1st element store the matrix itself, the 2nd element create an empty
#object for storing the inverse of the matrix, the 3rd element is a function for storing the inverse and the
#matrix and the 4th element is a function calculating the inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
#this function look in the object past in makeCacheMatrix and verified if the inverse of the matrix has already
#been calculated, if it is the case, the function simply return the inverse that is stored, otherwise, the function
#caculates the inverse of the matrix, stored it and return it
x <- cbind(c(1,2,3),c(4,5,6),c(7,8,9))
x
toto <- makeCacheMatrix(x)
cacheSolve(toto)
x <- cbind(c(1,2,3),c(4,5,6),c(1,1,1))
x
toto <- makeCacheMatrix(x)
cacheSolve(toto)
toto
##assignement
#matrix making
makeCacheMatrix <- function(x = matrix){
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#matrix inversing
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x <- cbind(c(1,2,3),c(2,3,4),c(4,5,6))
x
toto <- makeCacheMatrix(x)
cacheSolve(toto)
toto
solve(x)
pnorm(5, 5, 2)
pnorm(4, 5, 2)
pnorm(6, 5, 2)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
bye()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
print(cran)
cran
?group_by()
??group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(mean(cran$size))
bye()
swirl()
package(swirl)
library(swirl)
swirl()
install.packages("RMySQL")
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
#test
library(dplyr)
set.seed(222)
x <- 1:10
y <- rnorm(10)
z <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
df1 <- cbind.data.frame(x,y,z); df1
a <- 1:5
b <- rnorm(5)
c <- c("a", "b", "c", "d", "e")
df2 <- cbind.data.frame(a,b,c); df2
df3 <- merge(df1, df2, by.x = "x", by.y = "a"); df3
df4 <- merge(df1, df2, by.x = "x", by.y = "a", all = TRUE); df4
df5 <- merge(df2, df1, by.x = "a", by.y = "x", all = TRUE); df5
library(dplyr)
set.seed(222)
x <- 1:10
y <- rnorm(10)
z <- c("a", "a", "a", "b", "b", "c", "c", "c", "c", "d")
df1 <- cbind.data.frame(x,y,z); df1
df1.mean <- aggregate(df1$y, by=list(df1$z), FUN=mean)
df1.mean
df1.mean <- aggregate(df1$y, by=list(df1$z), FUN=mean); df1.mean; df1
colnames(df1.mean)[which(names(df1.mean) == "x")] <- "Mean"
df1.mean; df1
df1.add <- merge(df1, df1,mean, by.x = "z", by.y = "Group.1"); df1.add
df1.add <- merge(df1, df1.mean, by.x = "z", by.y = "Group.1"); df1.add
pnorm(0.025, 0, 1)
qnorm(0.025, 0, 1)
library(ggplot2)
set.seed(101)
x <- runif(100, min=1, max=10)
y <- rnorm(length(x), mean=5, sd=0.1*x)
df <- data.frame(x=x*70, y=y)
m <- lm(y ~ x, data=df)
fit95 <- predict(m, interval="conf", level=.95)
fit99 <- predict(m, interval="conf", level=.999)
df <- cbind.data.frame(df,
lwr95=fit95[,"lwr"],  upr95=fit95[,"upr"],
lwr99=fit99[,"lwr"],  upr99=fit99[,"upr"])
p <- ggplot(df, aes(x, y))
p + geom_point() +
geom_smooth(method="lm", colour="black", lwd=1.1, se=FALSE) +
geom_line(aes(y = upr95), color="black", linetype=2) +
geom_line(aes(y = lwr95), color="black", linetype=2) +
geom_line(aes(y = upr99), color="red", linetype=3) +
geom_line(aes(y = lwr99), color="red", linetype=3)  +
annotate("text", 100, 6.5, label="95% limit", colour="black",
size=3, hjust=0) +
annotate("text", 100, 6.4, label="99.9% limit", colour="red",
size=3, hjust=0) +
labs(x="No. admissions...", y="Percentage of patients...") +
theme_bw()
predict(rpois, interval="conf", level=.95)
toto <- rpois(100, 100)
predict(toto, interval="conf", level=.95)
a <- 5
s <- 2
n <- 20
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
a <- 5
s <- 2
n <- 20
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
a <- 5
s <- 2
n <- 20
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
s <- 100
n <- 100
error <- qpois(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
s <- 100
n <- 100
error <- qpois(0.975, 100)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
error
qnorm(0.975)
a <- 100
error <- qnorm(0.975)*100/sqrt(100)
left <- a-error
right <- a+error
left
right
a <- 100
error <- qnorm(0.975)*1/sqrt(100)
left <- a-error
right <- a+error
left
right
a <- 100
error <- qnorm(0.975)*100/sqrt(1)
left <- a-error
right <- a+error
left
right
a <- 100
error <- qnorm(0.975)*100/sqrt(2)
left <- a-error
right <- a+error
left
right
a <- 100
error <- qnorm(0.975)*100/sqrt(20)
left <- a-error
right <- a+error
left
right
###Exploratory : Assignement 1###
###Nicolas Corneau-Tremblay###
#set working directory
setwd("/Users/nicot/Documents/Coursera/data science/Exploratory/Ass1")
getwd()
#reading file
list.files()
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?")
#set variables
names(data) <- tolower(names(data))
data$date <- as.Date(data$date, "%d/%m/%Y")
#keep dates 2007-02-01 and 2007-02-02
df <- data[data$date=="2007-02-01" | data$date=="2007-02-02",]
#plooting
#plot 1
hist(df$global_active_power, main = "Global Active Power")
hist(df$global_active_power, main = "Global Active Power", col = "red")
hist(df$global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
png("plot1", width = 480, height = 480)
hist(df$global_active_power, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
dev.off()
names(df)
head(df)
data$day <- weekdays(data$date , abbreviate = TRUE)
table(date$day)
data$day <- weekdays(data$date , abbreviate = FALSE)
table(date$day)
data$day
#keep dates 2007-02-01 and 2007-02-02
df <- data[data$date=="2007-02-01" | data$date=="2007-02-02",]
class(df$day)
data$day <- as.factor(weekdays(data$date , abbreviate = FALSE))
table(data$"OrchardSprays")
table(data$day)
data$day <- tolower(as.factor(weekdays(data$date , abbreviate = FALSE)))
table(data$day)
data$day <- <- substr(as.factor(weekdays(data$date , abbreviate = FALSE)),0 3)
data$day <- substr(as.factor(weekdays(data$date , abbreviate = FALSE)),0 3)
data$day <- substr(as.factor(weekdays(data$date , abbreviate = FALSE)),0, 3)
table(data$"OrchardSprays)
table(data$day)
""
)
q
"
table(data$day)
#keep dates 2007-02-01 and 2007-02-02
df <- data[data$date=="2007-02-01" | data$date=="2007-02-02",]
plot(df$global_active_power, data$day)
list.files()
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?")
#set variables
names(data) <- tolower(names(data))
data$date <- as.Date(data$date, "%d/%m/%Y")
data$day <- substr(as.factor(weekdays(data$date , abbreviate = FALSE)),0, 3)
#keep dates 2007-02-01 and 2007-02-02
df <- data[data$date=="2007-02-01" | data$date=="2007-02-02",]
plot(df$global_active_power, data$day)
plot(df$global_active_power, df$day)
plot(df$day, df$global_active_power)
names(df)
class9time
class(time)
plot(df$global_active_power, df$time)
plot(df$time, df$global_active_power)
#plot2
plot(df$time, df$global_active_power, type = "l")
plot(df$time, df$global_active_power, type = "l", lwd = 10)
plot(df$time, df$global_active_power, type = "l", lwd = 1)
plot(df$day, df$global_active_power, type = "l", lwd = 1)
plot(df$time, df$global_active_power, type = "l", lwd = 1)
data$time <- strptime(data$time)
data$time <- strptime(data$time, format = "POSIXlt")
class(data$time)
df <- data[data$date=="2007-02-01" | data$date=="2007-02-02",]
plot(df$time, df$global_active_power, type = "l", lwd = 1)
#plot2
plot(df$time, df$global_active_power, type = "l", lwd = 1)
